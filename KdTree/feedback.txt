/See the Assessment Guide for information on how to interpret this
report. /


    ASSESSMENT SUMMARY


Compilation:  PASSED
API:          PASSED

SpotBugs:     PASSED
PMD:          PASSED
Checkstyle:   PASSED

Correctness:  25/35 tests passed
Memory:       16/16 tests passed
Timing:       42/42 tests passed

Aggregate score: 82.86%
[ Compilation: 5%, API: 5%, Style: 0%, Correctness: 60%, Timing: 10%, Memory: 20% ]



    ASSESSMENT DETAILS


The following files were submitted:
----------------------------------
6.8K Oct  8 16:13 KdTree.java
1.8K Oct  8 16:13 PointSET.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for PointSET.java
*-----------------------------------------------------------

% custom checkstyle checks for KdTree.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: insert n random points; check size() and isEmpty() after each insertion
        (size may be less than n because of duplicates)
  * 5 random points in a 1-by-1 grid
  * 50 random points in a 8-by-8 grid
  * 100 random points in a 16-by-16 grid
  * 1000 random points in a 128-by-128 grid
  * 5000 random points in a 1024-by-1024 grid
  * 50000 random points in a 65536-by-65536 grid
==> passed

Test 2: insert n random points; check contains() with random query points
  * 1 random points in a 1-by-1 grid
  * 10 random points in a 4-by-4 grid
  * 20 random points in a 8-by-8 grid
  * 10000 random points in a 128-by-128 grid
  * 100000 random points in a 1024-by-1024 grid
  * 100000 random points in a 65536-by-65536 grid
==> passed

Test 3: insert random points; check nearest() with random query points
  * 10 random points in a 4-by-4 grid
  * 15 random points in a 8-by-8 grid
  * 20 random points in a 16-by-16 grid
  * 100 random points in a 32-by-32 grid
  * 10000 random points in a 65536-by-65536 grid
==> passed

Test 4: insert random points; check range() with random query rectangles
  * 2 random points and random rectangles in a 2-by-2 grid
  * 10 random points and random rectangles in a 4-by-4 grid
  * 20 random points and random rectangles in a 8-by-8 grid
  * 100 random points and random rectangles in a 16-by-16 grid
  * 1000 random points and random rectangles in a 64-by-64 grid
  * 10000 random points and random rectangles in a 128-by-128 grid
==> passed

Test 5: call methods before inserting any points
 * size() and isEmpty()
 * contains()
 * nearest()
 * range()
==> passed

Test 6: call methods with null argument
  * insert()
  * contains()
  * range()
  * nearest()
==> passed

Test 7: check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with
        probabilities (p1, p2, p3, p4, p5, p6, p7), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.1, 0.1, 0.1, 0.2, 0.2)
==> passed

Test 8: check that two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
Running 27 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 4 of 5
    - student   size()    = 4
    - reference size()    = 3
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 1.0
      B  0.0 0.0
      C  1.0 1.0
      D  1.0 1.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 8 of 10
    - student   size()    = 8
    - reference size()    = 7
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 0.75
      B  1.0 1.0
      C  0.5 1.0
      D  0.0 0.5
      E  0.0 0.0
      F  1.0 0.0
      G  1.0 0.25
      H  0.5 1.0

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 12 of 50
    - student   size()    = 12
    - reference size()    = 11
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.5 0.5
      B  0.875 0.0
      C  0.5 0.0
      D  1.0 0.0
      E  0.625 1.0
      F  0.125 0.5
      G  0.125 0.625
      H  0.0 0.25
      I  0.5 0.375
      J  0.625 0.5
      K  0.75 0.875
      L  0.75 0.875

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 27 of 100000
    - student   size()    = 27
    - reference size()    = 26
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 246 of 100000
    - student   size()    = 246
    - reference size()    = 245
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1006 of 100000
    - student   size()    = 1006
    - reference size()    = 1005
    - student   isEmpty() = false
    - reference isEmpty() = false

==> *FAILED*

Test 2a: insert points from file; check contains() with random query points
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check range() with random query rectangles
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 3d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.0] x [0.5, 1.0]
    - student   range():  C C C C C C C C C C C C C C C C C C C C C C C C C C ...
    - reference range():  G C 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.3125, 0.875] x [0.25, 0.625]
    - student   range():  N N N N N N N N N N N N N N N N N N K K K K K K K K ...
    - reference range():  G Q G G L T J P Z X U K C E U U M H U J F Y S Z K L ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0234375, 0.6328125] x [0.2578125, 0.546875]
    - student   range():  B B Z F F Z B S T M P W H Y U N P P A V Y C P M I R ...
    - reference range():  A X Q Q G S I I F L G P V X Q W N T J I I C L H R Z ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0205078125, 0.9375] x [0.36328125, 0.755859375]
    - student   range():  K P B P D P H S P W U R P Z W A B R B Y Z D H M V U ...
    - reference range():  G Z K I A E M A J K M H N L H I X I S X S F Z Z V D ...

==> *FAILED*

Test 3e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
    - failed on trial 0 of 10
    - query rectangle = [0.375, 0.625] x [0.0, 0.125]
    - sequence of points inserted: 
      A  0.5 0.0
      B  0.0 0.0
      C  0.25 0.0
      D  0.0 0.0
      E  0.5 0.0
      F  0.25 1.0
      G  1.0 0.0
      H  0.25 1.0
      I  0.5 1.0
      J  0.0 0.0
    - student   range():  E E 
    - reference range():  E 

  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> *FAILED*

Test 4a: insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
  * input5.txt
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.15, 0.85] x [0.52, 0.61]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student kd-tree nodes involved in calls to Point2D methods:
      A B C D E 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B D E 
    - failed on trial 1 of 1000

  * input10.txt
    - student range() returns correct set of points
    - student   range():  B 
    - reference range():  B 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.55, 0.77] x [0.15, 0.48]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student kd-tree nodes involved in calls to Point2D methods:
      A B D G J C 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B G J H I 
    - failed on trial 1 of 1000

==> *FAILED*

Test 4b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - student range() returns correct set of points
    - student   range():  B 
    - reference range():  B 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.25, 0.875] x [0.375, 0.625]
    - sequence of points inserted: 
      A  0.625 0.875
      B  0.375 0.5
      C  0.75 1.0
      D  0.125 0.25
      E  0.0 0.125
      F  0.5 0.0
    - student kd-tree nodes involved in calls to Point2D methods:
      A B D E F C 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B D F C 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - student range() returns correct set of points
    - student   range():  E 
    - reference range():  E 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.75, 0.9375] x [0.0, 0.125]
    - sequence of points inserted: 
      A  0.125 0.875
      B  0.25 0.375
      C  0.8125 0.6875
      D  0.5625 0.9375
      E  0.875 0.0625
      F  0.625 0.8125
      G  0.6875 0.625
      H  0.0 0.75
      I  0.4375 0.3125
      J  0.1875 0.1875
    - student kd-tree nodes involved in calls to Point2D methods:
      A B H C E G I F D 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B E I J 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - student range() returns correct set of points
    - student   range():  empty
    - reference range():  empty
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.46875, 0.53125] x [0.28125, 0.9375]
    - sequence of points inserted: 
      A  0.15625 0.875
      B  0.375 0.5
      C  0.0625 0.90625
      D  0.875 1.0
      E  0.9375 0.375
      F  0.90625 0.75
      G  0.21875 0.40625
      H  0.25 0.0
      I  0.03125 0.84375
      J  0.78125 0.15625
      K  0.5625 0.8125
      L  0.8125 0.34375
      M  0.40625 0.53125
      N  0.34375 0.21875
      O  0.625 0.65625
      P  0.65625 0.46875
      Q  0.75 0.03125
      R  1.0 0.59375
      S  0.71875 0.71875
      T  0.1875 0.625
    - student kd-tree nodes involved in calls to Point2D methods:
      A B G E J Q L F K M O P S R C D 
    - reference kd-tree nodes involved in calls to Point2D methods:
      A B E G H J L N P D K M O S 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - student range() returns correct set of points
    - student   range():  M L C X V Y T 
    - reference range():  T Y V X C L M 
    - performs incorrect traversal of kd-tree during call to range()
    - query rectangle = [0.375, 0.796875] x [0.515625, 0.828125]
    - number of entries in student   solution: 18
    - number of entries in reference solution: 14
    - 4 extra entries in student solution, including:
      '(0.0625, 0.96875)'

    - failed on trial 1 of 1000

==> *FAILED*

Test 5a: insert points from file; check nearest() with random query points
  * input0.txt

    java.lang.NullPointerException

    KdTree.nearest(KdTree.java:156)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:282)
    TestKdTree.test5a(TestKdTree.java:1759)
    TestKdTree.main(TestKdTree.java:1974)

  * input1.txt
  * input5.txt
  * input10.txt
==> *FAILED*

Test 5b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 5d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert points from file; check nearest() with random query points
         and check traversal of kd-tree
  * input5.txt
    - student   nearest() = (0.4, 0.7)
    - reference nearest() = (0.4, 0.7)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.36, 0.91)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B C D E 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D 
    - failed on trial 2 of 1000

  * input10.txt
    - student   nearest() = (0.862, 0.825)
    - reference nearest() = (0.862, 0.825)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.62, 0.95)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C F H I E B 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B H I C F 
    - failed on trial 1 of 1000

==> *FAILED*

Test 6b: insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.375, 0.0)
    - reference nearest() = (0.375, 0.0)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.0, 0.25)
    - sequence of points inserted: 
      A  0.625 0.875
      B  0.75 1.0
      C  0.875 0.125
      D  0.375 0.0
      E  0.5 0.5
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A C D E B 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A D E 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.8125, 0.25)
    - reference nearest() = (0.8125, 0.25)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (1.0, 0.375)
    - sequence of points inserted: 
      A  0.25 0.75
      B  0.75 0.625
      C  0.375 0.6875
      D  0.6875 0.3125
      E  0.875 0.125
      F  0.1875 0.5
      G  0.0625 1.0
      H  0.125 0.4375
      I  0.9375 0.0
      J  0.8125 0.25
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B E J I C G 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B D E J 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.125, 0.96875)
    - reference nearest() = (0.125, 0.96875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - query point = (0.28125, 0.90625)
    - sequence of points inserted: 
      A  0.125 0.96875
      B  0.53125 0.53125
      C  0.90625 0.40625
      D  0.875 0.28125
      E  0.6875 0.4375
      F  0.0 0.21875
      G  0.75 0.6875
      H  0.59375 0.375
      I  0.4375 0.84375
      J  0.78125 0.78125
      K  0.1875 0.65625
      L  0.15625 0.09375
      M  0.71875 0.15625
      N  0.21875 0.625
      O  0.40625 0.125
      P  0.96875 0.5625
      Q  0.8125 0.0625
      R  0.5625 0.03125
      S  1.0 0.75
      T  0.0625 0.34375
    - student sequence of kd-tree nodes involved in calls to Point2D methods:
      A B F I K N L C 
    - reference sequence of kd-tree nodes involved in calls to Point2D methods:
      A B G I K N F T 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.390625, 0.0625)
    - reference nearest() = (0.390625, 0.0625)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 19
    - number of reference entries = 11
    - entry 3 of the two sequences are not equal
    - student   entry 3 = (0.015625, 0.078125)
    - reference entry 3 = (0.421875, 0.71875)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.3984375, 0.828125)
    - reference nearest() = (0.3984375, 0.828125)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 17
    - number of reference entries = 16
    - entry 1 of the two sequences are not equal
    - student   entry 1 = (0.9453125, 0.5703125)
    - reference entry 1 = (0.3125, 0.1796875)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.72265625, 0.38232421875)
    - reference nearest() = (0.72265625, 0.38232421875)
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 56
    - number of reference entries = 36
    - entry 4 of the two sequences are not equal
    - student   entry 4 = (0.26123046875, 0.41162109375)
    - reference entry 4 = (0.97998046875, 0.29736328125)

    - failed on trial 1 of 1000

==> *FAILED*

Test 7: check with no points
  * size() and isEmpty()
  * contains()
  * nearest()

    java.lang.NullPointerException

    KdTree.nearest(KdTree.java:156)
    TestKdTree.checkNearest(TestKdTree.java:316)
    TestKdTree.checkNearest(TestKdTree.java:271)
    TestKdTree.test7(TestKdTree.java:1832)
    TestKdTree.main(TestKdTree.java:1992)

  * range()
==> *FAILED*

Test 8: check that the specified exception is thrown with null arguments
  * argument to insert() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9a: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9b: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 9c: check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 18 of 20000
    - rectangle = [1.0, 1.0] x [0.0, 0.0]
    - student   range():  K K K 
    - reference range():  K 
    - sequence of operations was:
           st.insert(0.0, 1.0)
           st.contains((0.0, 1.0))  ==>  true
           st.insert(1.0, 1.0)
           st.insert(0.0, 0.0)
           st.nearest((0.0, 1.0))   ==>  (0.0, 1.0)
           st.insert(1.0, 0.0)
           st.range([0.0, 1.0] x [1.0, 1.0])  ==>  Z E 
           st.contains((0.0, 0.0))  ==>  true
           st.contains((1.0, 0.0))  ==>  true
           st.insert(1.0, 0.0)
           st.contains((1.0, 0.0))  ==>  true
           st.contains((1.0, 1.0))  ==>  true
           st.insert(1.0, 0.0)
           st.insert(1.0, 1.0)
           st.nearest((1.0, 0.0))   ==>  (1.0, 0.0)
           st.nearest((0.0, 0.0))   ==>  (0.0, 0.0)
           st.nearest((1.0, 1.0))   ==>  (1.0, 1.0)
           st.range([1.0, 1.0] x [0.0, 0.0])  ==>  K K K 

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 85 of 20000
    - student   size() = 26
    - reference size() = 25

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 856 of 20000
    - rectangle = [0.1171875, 0.8046875] x [0.046875, 0.96875]
    - student   range():  H W V C M J L T O E N A G K Y E A G R M G I D L B J ...
    - reference range():  M H V K H E I H B I B Q W O H E O O M S I D W M S K ...

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 3349 of 20000
    - student   size() = 999
    - reference size() = 998

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> *FAILED*

Test 10: insert n random points into two different KdTree objects;
        check that repeated calls to size(), contains(), range(),
        and nearest() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 17/27 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes

================================================================



Analyzing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes

================================================================



Analyzing memory of PointSET
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          264                264
=> passed        2          360                360
=> passed        5          648                648
=> passed       10         1128               1128
=> passed       25         2568               2568
=> passed      100         9768               9768
=> passed      400        38568              38568
=> passed      800        76968              76968
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 168.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          168                160
=> passed        2          304                288
=> passed        5          712                672
=> passed       10         1392               1312
=> passed       25         3432               3232
=> passed      100        13632              12832
=> passed      400        54432              51232
=> passed      800       108832             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 136.00 n + 32.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000    1750146         
=> passed   320000    1844565         
=> passed   640000    1493419         
=> passed  1280000    1073735         
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     683568         
=> passed   320000     579622         
=> passed   640000     539317         
=> passed  1280000     473201         
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4810         
=> passed    20000       1682         
=> passed    40000        734         
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       6423         
=> passed    20000       2036         
=> passed    40000        868         
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Test 1a-d: Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000    1052385               1.0              32.1              33.6               0.0         
=> passed   320000     979580               1.0              31.8              33.3               0.0         
=> passed   640000     829017               1.0              33.5              35.0               0.0         
=> passed  1280000     651340               1.0              36.7              38.2               0.0         
==> 4/4 tests passed


Test 2a-h: Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     829213              54.7              18.9               0.0         
=> passed    20000     831474              54.3              18.8               0.0         
=> passed    40000     723212              64.8              22.3               0.0         
=> passed    80000     579200              65.7              22.6               0.0         
=> passed   160000     503036              67.2              23.1               0.0         
=> passed   320000     455840              73.5              25.2               0.0         
=> passed   640000     443133              75.4              25.8               0.0         
=> passed  1280000     386791              81.7              27.9               0.0         
==> 8/8 tests passed


Test 3a-h: Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     460248              48.4              48.4              75.3              12.4         
=> passed    20000     431580              53.8              53.8              84.9              13.6         
=> passed    40000     377419              59.6              59.6              94.4              18.7         
=> passed    80000     311860              60.5              60.5              96.2              16.2         
=> passed   160000     227074              70.0              70.0             112.8              23.3         
=> passed   320000     205816              68.8              68.8             107.1              14.5         
=> passed   640000     201788              69.0              69.0             106.9              14.8         
=> passed  1280000     159755              74.5              74.5             116.0              15.6         
==> 8/8 tests passed


Test 4a-h: Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   428521                 134.5                   44.8                   123.7             125.1         
=> passed    20000   402479                 144.6                   48.2                   132.8             134.3         
=> passed    40000   351495                 159.1                   53.0                   146.1             147.0         
=> passed    80000   289772                 160.9                   53.6                   147.1             147.9         
=> passed   160000   226052                 176.3                   58.8                   160.9             162.6         
=> passed   320000   219108                 185.0                   61.7                   169.3             170.5         
=> passed   640000   185724                 195.7                   65.2                   178.7             180.1         
=> passed  1280000   152926                 210.6                   70.2                   191.4             194.4         
==> 8/8 tests passed



Total: 28/28 tests passed!


================================================================




